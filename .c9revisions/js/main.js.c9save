{"ts":1348424972275,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//Globals\nvar Graphs;\n\n//Objects\nfunction information() {\n\tthis.format;\n\tthis.venue;\n\tthis.vehicle;\n\tthis.user;\n\tthis.datasource;\n\tthis.comment;\n\tthis.date;\n\tthis.time;\n\tthis.samplerate;\n\tthis.duration;\n\tthis.segment;\n\tthis.beaconmarkers;\n}\n\n\n\n//JQuery\nfunction UI(){\n\n  \n    $( \"#mainwindow\" ).sortable({placeholder: \"ui-state-highlight\", axis: 'y', distance: 100, handle: '.graphheader'});\n   // $( \"#mainwindow\" ).disableSelection();\n \n\n\t// Tabs\n\t$('#tabs').tabs();\n    $('#tabs').resizable(\"aspectRatio\");\n    \n    $('#mapcontainer').resizable(\"aspectRatio\");\n    \n\n\n\t// Dialog\t\t\t\n\t$('#dialogAlert').dialog({\n\t\tautoOpen: true,\n\t\twidth: 600,\n\t\tbuttons: {\n\t\t\t\"Ok\": function() { \n\t\t\t\t$(this).dialog(\"close\"); \n\t\t\t}, \n\t\t\t\"Cancel\": function() { \n\t\t\t\t$(this).dialog(\"close\"); \n\t\t\t} \n\t\t}\n\t});\n\n\t\n\t$('#dialogAlert').dialog ('close');\n\t\t\t\n    $('#progressbar').progressbar();  \n    $('#lapselector').hide();\n}\n\nfunction presentInformation(info) {\n\t\n\tvar infostr;\n\t\n\tinfostr=\"<table><tr class='infostyle'><td class='infoheader'>Format:</td><td>\"+info.format+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='infostyle'><td class='infoheader'>Venue:</td><td>\"+info.venue+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='infostyle'><td class='infoheader'>Vehicle:</td><td>\"+info.vehicle+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='infostyle'><td class='infoheader'>User:</td><td>\"+info.user+\"</td></tr>\";\n\tinfostr=infostr+\"</table>\";\n\t$('#informationcontent').append(infostr);\n\t\n\tinfostr=\"<table><tr class='detailsstyle'><td class='infoheader'>DataSource:</td><td>\"+info.datasource+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Comment:</td><td>\"+info.comment+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Date:</td><td>\"+info.date+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Time:</td><td>\"+info.time+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>SampleRate:</td><td>\"+info.samplerate+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Duration:</td><td>\"+info.duration+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Segment:</td><td>\"+info.segment+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Beacon Markers:</td><td>\"+info.beaconmarkers+\"</td></tr>\";\n\tinfostr=infostr+\"</table>\";\n\t\n\t$('#detailscontent').append(infostr);\n\t\n\t\n}\n\nfunction presentLaps(laps) {\n\t\n\tvar infostr;\n    var lapselect;\n\t\n    lapselect=\"<div id='lapset'>\";\n\tinfostr=\"<table><tr><td></td><td>Lanps</td><td>Time</td></tr>\";\n\tfor(var count=0;count<laps.length; count++) {\n\t\tinfostr=infostr+\"<tr><td><input type='checkbox' name='checklap' value=\"+laps[count].lap+\"/></td><td>\"+laps[count].lap+\"</td><td>\"+laps[count].laptime+\"</td></tr>\";\n        lapselect=lapselect+\"<input type='checkbox' checked value='\"+laps[count].lap+\"' id='\"+laps[count].lap+\"'/><label for=\"+laps[count].lap+\">\"+laps[count].lap+\"</label>\";\n    }\n    \n\tinfostr=infostr+\"</table>\";\n    lapselect=lapselect+\"</div>\";\n\t\n\t$('#laps').append(infostr);\n    $('#lapselector').append(lapselect);\n    \n    $('#lapset').buttonset();\n    $('#lapset input[type=checkbox]').change(function() {\n            var s = $(\"#lapset > input:checkbox:checked\");\n//            var un= $(\"#lapset > input:[type=checkbox][checked=false]\");\n            var un=$(\"#lapset > input\").not(\"#lapset > input:checkbox:checked\");\n            var sids=Array();\n            var uids=Array();\n            for (count=0; count<s.length; count++){\n                sids.push(s[count].value);\n            }\n            for (count=0; count<un.length; count++){\n                uids.push(un[count].value);\n            }\n            //var us= $(\"#lapset > input:checkbox:unchecked\");\n            changeSeriesState(sids,uids);  \n    });\n    \n    /*$(\"#lapset input[type=checkbox]\").change( function() {\n            var s = $(\"#lapset > input:checkbox:checked\");\n            var us= $(\"#lapset > input:checkbox:unchecked\");\n            changeSeriesState(s,us);\n     });*/\n    \n}\n\n\n//HighGraph\nfunction map(container, teldatastr, laps) {\n\tvar options;\n\tvar chart;\n\n    var accwidth=($(document).width())*0.30;\n    \n    $(\"mapcontainer\").width(accwidth);\n    var teldata=JSON.parse(teldatastr);\n    \n\toptions = {\n\t\t\tchart: {\n\t\t\t\trenderTo: container, \n\t\t\t\tdefaultSeriesType: 'scatter',\n\t\t\t\tzoomType: 'xy',\n                spacingTop: 20,\n                spacingBottom: 20,\n                spacingRight: 20,\n                spacingLeft: 20,\n                width: accwidth,\n\t            height: accwidth,\n                ignoreHiddenSeries: false,\n\t\t\t},\n            title: {\n              text: ''  \n            },\n\t\t\txAxis: {\n                labels: {\n                  enabled: true  \n                },\n                title: {\n                    enabled: null,\n                    text: null\n                },\n\t\t\t\tstartOnTick: true,\n\t\t\t\tendOnTick: true,\n\t\t\t\tshowLastLabel: true,\n                maxPadding: 0.0,\n                minPadding: 0.0,\n                tickInterval: 10,\n                gridLineWidth: 1\n\t\t\t},\n            yAxis: {\n                labels: {\n                    enabled: true\n                },\n                title: {\n                    enabled: null,\n                    text: null\n                },\n                startOnTick: true,\n\t\t\t\tendOnTick: true,\n\t\t\t\tshowLastLabel: true,\n                maxPadding: 0.0,\n                minPadding: 0.0,\n                tickInterval: 10\n            },\n\t\t\ttooltip: {\n\t\t\t\tformatter: function() {\n                    manipulateID(this.point.id,\"highlight\");\n                    return Highcharts.numberFormat(teldata[this.point.id].Speed, 0, ',');\n\t\t\t\t}\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tscatter: {\n\t\t\t\t\tlinewidth: 1,\n\t\t\t\t\tmarker: {\n\t\t\t\t\t\tradius: 2,\n\t\t\t\t\t\tsymbol: 'circle'\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\tseries: []\n\t};\n\n\tvar series = {\n\t\t\tdata: []\n\t};\n\n\tvar gearcolor=['#000000','#0000FF','#000080','#00FF00','#FFFF00','#FF0000','#800080'];\n\t\n\t\n\tvar gear=0;\n\n\tfor(var lapcount=0; lapcount<laps.length; lapcount++) {\n\t\tseries.name = 'Lap'+lapcount;\n        series.id='Lap'+lapcount;\n\t\tfor(var count=laps[lapcount].start;count<laps[lapcount].stop; count++) {\n\t\t\tif (gear==parseInt(teldata[count].Gear) || parseInt(teldata[count].Gear)==0) {\n\t\t\t\t    var point={\n                        id: count,\n\t\t\t\t\t\tname: teldata[count].Gear,\n\t\t\t\t\t\tmarker: { \n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\tsymbol: 'circle', \n\t\t\t\t\t\t\tradius: 1,\n\t\t\t\t\t\t\tfillColor: gearcolor[parseInt(teldata[count].Gear)] \n\t\t\t\t\t\t},\n\t\t\t\t\t\tx: parseFloat(teldata[count].PosX),\n\t\t\t\t\t\ty: parseFloat(teldata[count].PosY)\n\t\t\t\t};\n\t\t\t\tseries.data.push(point);\n\t\t\t} else {\n\t\t\t\tvar point={\n                        id: count,\n\t\t\t\t\t\tname: teldata[count].Gear,\n\t\t\t\t\t\tmarker: { \n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\tsymbol: 'circle', \n\t\t\t\t\t\t\tradius: 1,\n\t\t\t\t\t\t\tfillColor: gearcolor[parseInt(teldata[count].Gear)] \n\t\t\t\t\t\t},\n\t\t\t\t\t\tx: parseFloat(teldata[count].PosX),\n\t\t\t\t\t\ty: parseFloat(teldata[count].PosY)\n\t\t\t\t};\n\t\t\t\tgear=parseInt(teldata[count].Gear);\n\t\t\t\tseries.data.push(point);\n\t\t\t}\n\t\t}\n\t\toptions.series.push(series);\n\t\t\n\t\tvar series = {\n\t\t\t\tdata: []\n\t\t};\n\t}\n\tchart=new Highcharts.Chart(options);\n    \n    return chart;\n}\n\n\nfunction analysisGraph(container,attr,teldatastr,laps, tickmark) {\n\tvar options;\n\tvar chart;\n    \n    var accwidth=($(document).width())*0.54;\n    \n\n\toptions = {\n\t\t\tchart: {\n\t\t\t\trenderTo: container,\n\t\t\t\tzoomType: 'x',\n\t\t\t\tdefaultSeriesType: 'line',\n                reflow: true,\n                spacingTop: 10,\n                spacingBottom: 10,\n                spacingRight: 10,\n                spacingLeft: 10,\n                width: accwidth,\n                height: 200,\n                plotBackgroundColor: '#000000',\n                backgroundColor: '#000000',\n                ignoreHiddenSeries: false\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: null,\n\t\t\t\tx: -20 //center\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\ttype: 'linear',\n                labels: {\n                    enabled: false\n                },\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: attr\n\t\t\t\t},\n                maxPadding: 0.0,\n                minPadding: 0.0,\n                tickInterval: tickmark,\n\t\t\t\tplotLines: [{\n\t\t\t\t\tvalue: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\tcolor: '#808080'\n\t\t\t\t}]\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tline: {\n\t\t\t\t\tlinewidth : 0.5,\n\t\t\t\t\tmarker : {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tradius: 0,\n\t\t\t\t\t\tsymbol: 'circle',\n                        states: {\n                            select: {\n                                enabled: true,\n                                radius: 3\n                            }\n                        }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tformatter: function() {\n                    manipulateID(this.point.id,\"highlight\");\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0, ',');\n\t\t\t\t}\n\t\t\t},\n\t\t\tlegend: {\n                enabled: false\n\t\t\t},\n\t\t\tseries: []\n\t};\n\n\tvar series = {\n\t\t\tdata: []\n\t};\n\n\tvar gearcolor=['#000000','#0000FF','#000080','#00FF00','#FFFF00','#FF0000','#800080'];\n\t\n\tteldata=JSON.parse(teldatastr);\n\tvar gear=0;\n\n\tfor(var lapcount=0; lapcount<laps.length; lapcount++) {\n\t\tseries.name = 'Lap'+lapcount;\n        series.id= 'Lap'+lapcount;\n\t\tfor(var count=laps[lapcount].start;count<laps[lapcount].stop-1; count++) {\n\t\t\tif (gear==parseInt(teldata[count].Gear) || parseInt(teldata[count].Gear)==0) {\n\t\t\t\tvar point={ \n                        id: count,\n    \t\t\t\t\tname: teldata[count].Gear,\n\t\t\t\t\t\tmarker: { \n\t\t\t\t\t\t\tenabled: false, \n\t\t\t\t\t\t},\n\t\t\t\t\t\tx: parseFloat(teldata[count].Distance),\n\t\t\t\t\t\ty: parseFloat(teldata[count][attr])\n\t\t\t\t};\n\t\t\t\tseries.data.push(point);\n\t\t\t} else {\n\t\t\t\tvar point={\n                        id: count,\n\t\t\t\t\t\tname: teldata[count].Gear,\n\t\t\t\t\t\tmarker: { \n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\tsymbol: 'circle', \n\t\t\t\t\t\t\tradius: 3,\n\t\t\t\t\t\t\tfillColor: gearcolor[parseInt(teldata[count].Gear)] \n\t\t\t\t\t\t},\n\t\t\t\t\t\tx: parseFloat(teldata[count].Distance),\n\t\t\t\t\t\ty: parseFloat(teldata[count][attr])\n\t\t\t\t};\n\t\t\t\tgear=parseInt(teldata[count].Gear);\n\t\t\t\tseries.data.push(point);\n\t\t\t}\n\t\t}\n\t\toptions.series.push(series);\n\t\t\n\t\tvar series = {\n\t\t\t\tdata: []\n\t\t};\n\t}\n\tchart=new Highcharts.Chart(options);\n    \n    return chart;\n}\n\nfunction manipulateID(id,effect) {\n    \n    for(var count=0; count < Graphs.length;count++) {\n        Graphs[count].get(id).select(true, false);\n    }\n    \n}\n\nfunction changeSeriesState(sids,uids) {\n    for(var count=0; count < Graphs.length;count++) {\n        for(var count2=0;count2<sids.length;count2++) {\n            if(! Graphs[count].get('Lap'+sids[count2]).visible) {\n                Graphs[count].get('Lap'+sids[count2]).show();\n            }\n        }\n        for(var count2=0;count2<uids.length;count2++) {\n            if(Graphs[count].get('Lap'+uids[count2]).visible) {\n                Graphs[count].get('Lap'+uids[count2]).hide();\n            }\n        }\n    }\n}\n\n//File load\n\nfunction abortRead() {\n\treader.abort();\n}\n\nfunction errorHandler(evt) {\n\tswitch(evt.target.error.code) {\n\tcase evt.target.error.NOT_FOUND_ERR:\n\t\talert('File Not Found!');\n\t\tbreak;\n\tcase evt.target.error.NOT_READABLE_ERR:\n\t\talert('File is not readable');\n\t\tbreak;\n\tcase evt.target.error.ABORT_ERR:\n\t\tbreak; // noop\n\tcase evt.target.error.SECURITY_ERR:\n\t\talert('Security Error');\n\t\tbreak;\n\tdefault:\n\t\talert('An error occurred reading this file.');\n\t};\n}\n\nfunction updateProgress(evt) {\n\t// evt is an ProgressEvent.\n\tif (evt.lengthComputable) {\n\t\tvar percentLoaded = Math.round((evt.loaded / evt.total) * 100);\n\t\t// Increase the progress bar length.\n\t\tif (percentLoaded < 100) {\n\t\t\t$('#progressbar').progressbar({\n    \t\tvalue: percentLoaded\n\t\t    });\n\t\t}\n\t}\n}\n\nfunction handleFileSelect(evt) {\n\n\tvar reader;\n\tvar progress = document.querySelector('.percent');\n\n\treader = new FileReader();\n\treader.onerror = errorHandler;\n\treader.onprogress = updateProgress;\n\treader.onabort = function(e) {\n\t\talert('File read cancelled');\n\t};\n\treader.onloadstart = function(e) {\n\t\tdocument.getElementById('progress_bar').className = 'loading';\n\t};\n\treader.onload = function(e) {\n\t\t// Ensure that the progress bar displays 100% at the end.\n\t\t$('#progressbar').progressbar({\n    \t\tvalue: 100\n\t    });\n\n\t\t$('#dialogAlert').append('<h1>File Loaded</h1>');\n\t\t$('#dialogAlert').dialog('open');\n\n\t\tvar filecontent=reader.result;\n\t\t\n\t\tvar info=parseInformation(filecontent);\n\t\tvar data=parseDataFile(filecontent);\n\t\tvar laps=parseLap(data);\n\t\t\n\t\tpresentInformation(info);\n        $('#progressbar').hide();\n        $('#lapselector').show();\n\t\tpresentLaps(laps);\n        \n\t\t//speedGraph(data,laps);\n        var speedgraph=analysisGraph('speedgraph','Speed',data,laps,20);\n        var accelgraph=analysisGraph('accelgraph','LonAcc',data,laps,1);\n        var steergraph=analysisGraph('steergraph','Steer',data,laps,20);           \n        var throttlegraph=analysisGraph('throttlegraph','Throttle',data,laps,20);\n        var breakgraph=analysisGraph('brakegraph','Brake',data,laps,20);\n\t\t\n\t\tvar mapgraph=map('map',data,laps);\n        \n        Graphs=[speedgraph, accelgraph, steergraph, throttlegraph, breakgraph, mapgraph];\n        \n        // on event triggered change graphs\n        \n       //     manipulateID(graphs,\"highlight\",id);\n        \n\t};\n\n\t// Read in the image file as a binary string.\n\treader.readAsText(evt.target.files[0]);\n}\n\n// Data\n\nfunction parseInformation(content) {\n\tvar rows=content.replace(/[\\\"\\r]/g,\"\").split(\"\\n\");\n\n\tvar tmpinfo=new information();\n\t\n\ttmpinfo.format=rows[0].split(\",\")[1];\n\ttmpinfo.venue=rows[1].split(\",\")[1];\n\ttmpinfo.vehicle=rows[2].split(\",\")[1];\n\ttmpinfo.user=rows[3].split(\",\")[1];\n\ttmpinfo.datasource=rows[4].split(\",\")[1];\n\ttmpinfo.comment=rows[5].split(\",\")[1];\n\ttmpinfo.date=rows[6].split(\",\")[1];\n\ttmpinfo.time=rows[7].split(\",\")[1];\n\ttmpinfo.samplerate=rows[8].split(\",\")[1];\n\ttmpinfo.duration=rows[9].split(\",\")[1];\n\ttmpinfo.segment=rows[10].split(\",\")[1];\n\ttmpinfo.beaconmarkers=rows[11].split(\",\")[1];\n\n\t\n\treturn tmpinfo;\n}\n\nfunction parseUnits(content){\n\t\n\tvar rows=content.replace(/[\\\"\\r]/g,\"\").split(\"\\n\");\n\tvar tmpunits=rows[14].split(\",\");\t\n\t\n\tvar units = new Array();\n\t\n\tfor (var count=0;count < tmpunits.length; count++) {\n\t\tunits.push(tmpunits[count]);\n\t};\n\t\n\treturn units;\n\t\n}\n\nfunction parseLap(datastring) {\n\n\tvar dataobj=JSON.parse(datastring);\n\tdataobj.sort(function (a,b) {return a.Time*1000 - b.Time*1000;});\n\tvar lapcount=0;\n\tvar laps=new Array();\n\tvar start=1;\n\t\n\tfor(var count=1;count<dataobj.length; count++) {\n\t\tif (parseFloat(dataobj[count].Distance)+1<parseFloat(dataobj[count-1].Distance)) {\n\t\t\tvar lapdata=new Object;\n\t\t\tlapdata.start=start;\n\t\t\tlapdata.stop=count;\n\t\t\tlapdata.lap=lapcount;\n\t\t\tlapdata.laptime=parseFloat(dataobj[count].Time)-parseFloat(dataobj[start].Time);\n\t\t\tlaps[lapcount]=lapdata;\n\t\t\tstart=count+1;\n\t\t\tlapcount++;\n\t\t}\n\t}\n\t\n    if (dataobj.length > start) {\n        var lapdata=new Object;\n        lapdata.start=start;\n\t    lapdata.stop=dataobj.length;\n\t    lapdata.lap=lapcount;\n\t    lapdata.laptime=parseFloat(dataobj[dataobj.length-1].Time)-parseFloat(dataobj[start].Time);\n\t    laps[lapcount]=lapdata;\n    }\n            \n\treturn laps;\n\t\n}\n\nfunction parseDataFile(content) {\n\t\n\tvar data = new Array;\n\t    \n\tvar rows=content.replace(/[\\\"\\r]/g,\"\").split(\"\\n\");\t\n        \n\tvar headings1=rows[13].split(\",\");\n\n\tvar headings = new Array();\n\t\t\n\tfor (var count=0;count < headings1.length; count++) {\n\t\theadings.push(headings1[count]);\n\t};\n\t\n\n    for (var count=16;count < rows.length; count++) {\n\t\tvar dataobj= new Object;\n\t\tdatarow=rows[count].split(\",\");\n\t\tfor (var count2=0; count2<headings.length; count2++) {\n\t\t\tdataobj[headings[count2]]=datarow[count2];\n\t\t}\n\t\tdata.push(dataobj);\n\t}\n\t\n\tvar datastring=JSON.stringify(data);\n\t\n\treturn datastring;\n}"]],"start1":0,"start2":0,"length1":0,"length2":15621}]],"length":15621}
{"contributors":[],"silentsave":false,"ts":1351106703392,"patch":[[{"diffs":[[1,"//Globals\nvar Graphs;\n\n//Objects\nfunction information() {\n\tthis.format;\n\tthis.venue;\n\tthis.vehicle;\n\tthis.user;\n\tthis.datasource;\n\tthis.comment;\n\tthis.date;\n\tthis.time;\n\tthis.samplerate;\n\tthis.duration;\n\tthis.segment;\n\tthis.beaconmarkers;\n}\n\n\n\n//JQuery\nfunction UI(){\n\n  \n    $( \"#mainwindow\" ).sortable({placeholder: \"ui-state-highlight\", axis: 'y', distance: 100, handle: '.graphheader'});\n   // $( \"#mainwindow\" ).disableSelection();\n \n\n\t// Tabs\n\t$('#tabs').tabs();\n    //Fx error on resizable before init\n    //$('#tabs').resizable(\"aspectRatio\");\n    \n    //$('#mapcontainer').resizable(\"aspectRatio\");\n    \n\n\t// Dialog\t\t\t\n\t$('#dialogAlert').dialog({\n\t\tautoOpen: true,\n\t\twidth: 600,\n\t\tbuttons: {\n\t\t\t\"Ok\": function() { \n\t\t\t\t$(this).dialog(\"close\"); \n\t\t\t}, \n\t\t\t\"Cancel\": function() { \n\t\t\t\t$(this).dialog(\"close\"); \n\t\t\t} \n\t\t}\n\t});\n\n\t\n\t$('#dialogAlert').dialog ('close');\n\t\t\t\n    $('#lapselector').hide();\n    \n    $('#telemetryfile').live('change', handleFileSelect);\n}\n\nfunction presentInformation(info) {\n\t\n\tvar infostr;\n\t\n\tinfostr=\"<table><tr class='infostyle'><td class='infoheader'>Format:</td><td>\"+info.format+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='infostyle'><td class='infoheader'>Venue:</td><td>\"+info.venue+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='infostyle'><td class='infoheader'>Vehicle:</td><td>\"+info.vehicle+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='infostyle'><td class='infoheader'>User:</td><td>\"+info.user+\"</td></tr>\";\n\tinfostr=infostr+\"</table>\";\n\t$('#informationcontent').append(infostr);\n\t\n\tinfostr=\"<table><tr class='detailsstyle'><td class='infoheader'>DataSource:</td><td>\"+info.datasource+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Comment:</td><td>\"+info.comment+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Date:</td><td>\"+info.date+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Time:</td><td>\"+info.time+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>SampleRate:</td><td>\"+info.samplerate+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Duration:</td><td>\"+info.duration+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Segment:</td><td>\"+info.segment+\"</td></tr>\";\n\tinfostr=infostr+\"<tr class='detailsstyle'><td class='infoheader'>Beacon Markers:</td><td>\"+info.beaconmarkers+\"</td></tr>\";\n\tinfostr=infostr+\"</table>\";\n\t\n\t$('#detailscontent').append(infostr);\n\t\n\t\n}\n\nfunction presentLaps(laps) {\n\t\n\tvar infostr;\n    var lapselect;\n\t\n    lapselect=\"<div id='lapset'>\";\n\tinfostr=\"<table><tr><td></td><td>Lanps</td><td>Time</td></tr>\";\n\tfor(var count=0;count<laps.length; count++) {\n\t\tinfostr=infostr+\"<tr><td><input type='checkbox' name='checklap' value=\"+laps[count].lap+\"/></td><td>\"+laps[count].lap+\"</td><td>\"+laps[count].laptime+\"</td></tr>\";\n        lapselect=lapselect+\"<input type='checkbox' checked value='\"+laps[count].lap+\"' id='\"+laps[count].lap+\"'/><label for=\"+laps[count].lap+\">\"+laps[count].lap+\"</label>\";\n    }\n    \n\tinfostr=infostr+\"</table>\";\n    lapselect=lapselect+\"</div>\";\n\t\n\t$('#laps').append(infostr);\n    $('#lapselector').append(lapselect);\n    \n    $('#lapset').buttonset();\n    $('#lapset input[type=checkbox]').change(function() {\n            var s = $(\"#lapset > input:checkbox:checked\");\n//            var un= $(\"#lapset > input:[type=checkbox][checked=false]\");\n            var un=$(\"#lapset > input\").not(\"#lapset > input:checkbox:checked\");\n            var sids=[];\n            var uids=[];\n            for (count=0; count<s.length; count++){\n                sids.push(s[count].value);\n            }\n            for (count=0; count<un.length; count++){\n                uids.push(un[count].value);\n            }\n            //var us= $(\"#lapset > input:checkbox:unchecked\");\n            changeSeriesState(sids,uids);  \n    });\n    \n    /*$(\"#lapset input[type=checkbox]\").change( function() {\n            var s = $(\"#lapset > input:checkbox:checked\");\n            var us= $(\"#lapset > input:checkbox:unchecked\");\n            changeSeriesState(s,us);\n     });*/\n    \n}\n\n\n//HighGraph\nfunction map(container, teldatastr, laps) {\n\tvar options;\n\tvar chart;\n\n    var accwidth=($(document).width())*0.30;\n    \n    $(\"mapcontainer\").width(accwidth);\n    var teldata=JSON.parse(teldatastr);\n    \n\toptions = {\n\t\t\tchart: {\n\t\t\t\trenderTo: container, \n\t\t\t\tdefaultSeriesType: 'scatter',\n\t\t\t\tzoomType: 'xy',\n                spacingTop: 20,\n                spacingBottom: 20,\n                spacingRight: 20,\n                spacingLeft: 20,\n                width: accwidth,\n                height: accwidth,\n                ignoreHiddenSeries: false\n\t\t\t},\n            title: {\n              text: ''  \n            },\n\t\t\txAxis: {\n                labels: {\n                  enabled: true  \n                },\n                title: {\n                    enabled: null,\n                    text: null\n                },\n\t\t\t\tstartOnTick: true,\n\t\t\t\tendOnTick: true,\n\t\t\t\tshowLastLabel: true,\n                maxPadding: 0.0,\n                minPadding: 0.0,\n                tickInterval: 10,\n                gridLineWidth: 1\n\t\t\t},\n            yAxis: {\n                labels: {\n                    enabled: true\n                },\n                title: {\n                    enabled: null,\n                    text: null\n                },\n                startOnTick: true,\n\t\t\t\tendOnTick: true,\n\t\t\t\tshowLastLabel: true,\n                maxPadding: 0.0,\n                minPadding: 0.0,\n                tickInterval: 10\n            },\n\t\t\ttooltip: {\n\t\t\t\tformatter: function() {\n                    manipulateID(this.point.id,\"highlight\");\n                    return Highcharts.numberFormat(teldata[this.point.id].Speed, 0, ',');\n\t\t\t\t}\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tscatter: {\n\t\t\t\t\tlinewidth: 1,\n\t\t\t\t\tmarker: {\n\t\t\t\t\t\tradius: 2,\n\t\t\t\t\t\tsymbol: 'circle'\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\tseries: []\n\t};\n\n\tvar series = {\n\t\t\tdata: []\n\t};\n\n\tvar gearcolor=['#000000','#0000FF','#000080','#00FF00','#FFFF00','#FF0000','#800080'];\n\t\n\t\n\tvar gear=0;\n\n\tfor(var lapcount=0; lapcount<laps.length; lapcount++) {\n\t\tseries.name = 'Lap'+lapcount;\n        series.id='Lap'+lapcount;\n\t\tfor(var count=laps[lapcount].start;count<laps[lapcount].stop; count++) {\n\t\t\tif (gear==parseInt(teldata[count].Gear) || parseInt(teldata[count].Gear)==0) {\n\t\t\t\t    var point={\n                        id: count,\n\t\t\t\t\t\tname: teldata[count].Gear,\n\t\t\t\t\t\tmarker: { \n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\tsymbol: 'circle', \n\t\t\t\t\t\t\tradius: 1,\n\t\t\t\t\t\t\tfillColor: gearcolor[parseInt(teldata[count].Gear)] \n\t\t\t\t\t\t},\n\t\t\t\t\t\tx: parseFloat(teldata[count].PosX),\n\t\t\t\t\t\ty: parseFloat(teldata[count].PosY)\n\t\t\t\t};\n\t\t\t\tseries.data.push(point);\n\t\t\t} else {\n\t\t\t\tvar point={\n                        id: count,\n\t\t\t\t\t\tname: teldata[count].Gear,\n\t\t\t\t\t\tmarker: { \n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\tsymbol: 'circle', \n\t\t\t\t\t\t\tradius: 1,\n\t\t\t\t\t\t\tfillColor: gearcolor[parseInt(teldata[count].Gear)] \n\t\t\t\t\t\t},\n\t\t\t\t\t\tx: parseFloat(teldata[count].PosX),\n\t\t\t\t\t\ty: parseFloat(teldata[count].PosY)\n\t\t\t\t};\n\t\t\t\tgear=parseInt(teldata[count].Gear);\n\t\t\t\tseries.data.push(point);\n\t\t\t}\n\t\t}\n\t\toptions.series.push(series);\n\t\t\n\t\tvar series = {\n\t\t\t\tdata: []\n\t\t};\n\t}\n\tchart=new Highcharts.Chart(options);\n    \n    return chart;\n}\n\n\nfunction analysisGraph(container,attr,teldatastr,laps, tickmark) {\n\tvar options;\n\tvar chart;\n    \n    var accwidth=($(document).width())*0.54;\n    \n\n\toptions = {\n\t\t\tchart: {\n\t\t\t\trenderTo: container,\n\t\t\t\tzoomType: 'x',\n\t\t\t\tdefaultSeriesType: 'line',\n                reflow: true,\n                spacingTop: 10,\n                spacingBottom: 10,\n                spacingRight: 10,\n                spacingLeft: 10,\n                width: accwidth,\n                height: 200,\n                plotBackgroundColor: '#000000',\n                backgroundColor: '#000000',\n                ignoreHiddenSeries: false,\n                borderRadius: 0\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: null,\n\t\t\t\tx: -20 //center\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\ttype: 'linear',\n                labels: {\n                    enabled: false\n                },\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: attr\n\t\t\t\t},\n                maxPadding: 0.0,\n                minPadding: 0.0,\n                tickInterval: tickmark,\n\t\t\t\tplotLines: [{\n\t\t\t\t\tvalue: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\tcolor: '#808080'\n\t\t\t\t}]\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tline: {\n\t\t\t\t\tlinewidth : 1,\n\t\t\t\t\tmarker : {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tradius: 0,\n\t\t\t\t\t\tsymbol: 'circle',\n                        states: {\n                            select: {\n                                enabled: true,\n                                radius: 3\n                            }\n                        }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tformatter: function() {\n                    manipulateID(this.point.id,\"highlight\");\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0, ',');\n\t\t\t\t}\n\t\t\t},\n\t\t\tlegend: {\n                enabled: false\n\t\t\t},\n\t\t\tseries: []\n\t};\n\n\tvar series = {\n\t\t\tdata: []\n\t};\n\n\tvar gearcolor=['#000000','#0000FF','#000080','#00FF00','#FFFF00','#FF0000','#800080'];\n\t\n\tteldata=JSON.parse(teldatastr);\n\tvar gear=0;\n\n\tfor(var lapcount=0; lapcount<laps.length; lapcount++) {\n\t\tseries.name = 'Lap'+lapcount;\n        series.id= 'Lap'+lapcount;\n\t\tfor(var count=laps[lapcount].start;count<laps[lapcount].stop-1; count++) {\n\t\t\tif (gear==parseInt(teldata[count].Gear) || parseInt(teldata[count].Gear)==0) {\n\t\t\t\tvar point={ \n                        id: count,\n    \t\t\t\t\tname: teldata[count].Gear,\n\t\t\t\t\t\tmarker: { \n\t\t\t\t\t\t\tenabled: false, \n\t\t\t\t\t\t},\n\t\t\t\t\t\tx: parseFloat(teldata[count].Distance),\n\t\t\t\t\t\ty: parseFloat(teldata[count][attr])\n\t\t\t\t};\n\t\t\t\tseries.data.push(point);\n\t\t\t} else {\n\t\t\t\tvar point={\n                        id: count,\n\t\t\t\t\t\tname: teldata[count].Gear,\n\t\t\t\t\t\tmarker: { \n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\tsymbol: 'circle', \n\t\t\t\t\t\t\tradius: 3,\n\t\t\t\t\t\t\tfillColor: gearcolor[parseInt(teldata[count].Gear)] \n\t\t\t\t\t\t},\n\t\t\t\t\t\tx: parseFloat(teldata[count].Distance),\n\t\t\t\t\t\ty: parseFloat(teldata[count][attr])\n\t\t\t\t};\n\t\t\t\tgear=parseInt(teldata[count].Gear);\n\t\t\t\tseries.data.push(point);\n\t\t\t}\n\t\t}\n\t\toptions.series.push(series);\n\t\t\n\t\tvar series = {\n\t\t\t\tdata: []\n\t\t};\n\t}\n\tchart=new Highcharts.Chart(options);\n    \n    return chart;\n}\n\nfunction manipulateID(id,effect) {\n    \n    for(var count=0; count < Graphs.length;count++) {\n        Graphs[count].get(id).select(true, false);\n    }\n    \n}\n\nfunction changeSeriesState(sids,uids) {\n    for(var count=0; count < Graphs.length;count++) {\n        for(var count2=0;count2<sids.length;count2++) {\n            if(! Graphs[count].get('Lap'+sids[count2]).visible) {\n                Graphs[count].get('Lap'+sids[count2]).show();\n            }\n        }\n        for(var count2=0;count2<uids.length;count2++) {\n            if(Graphs[count].get('Lap'+uids[count2]).visible) {\n                Graphs[count].get('Lap'+uids[count2]).hide();\n            }\n        }\n    }\n}\n\n//File load\n\nfunction abortRead() {\n\treader.abort();\n}\n\nfunction errorHandler(evt) {\n\tswitch(evt.target.error.code) {\n\tcase evt.target.error.NOT_FOUND_ERR:\n\t\talert('File Not Found!');\n\t\tbreak;\n\tcase evt.target.error.NOT_READABLE_ERR:\n\t\talert('File is not readable');\n\t\tbreak;\n\tcase evt.target.error.ABORT_ERR:\n\t\tbreak; // noop\n\tcase evt.target.error.SECURITY_ERR:\n\t\talert('Security Error');\n\t\tbreak;\n\tdefault:\n\t\talert('An error occurred reading this file.');\n\t};\n}\n\nfunction handleFileSelect(evt) {\n\n\tvar reader;\n\n\treader = new FileReader();\n\treader.onerror = errorHandler;\n\treader.onabort = function(e) {\n\t\talert('File read cancelled');\n\t};\n\treader.onloadstart = function(e) {\n\n\t};\n\treader.onload = function(e) {\n\t\t\n\t\t$('#dialogAlert').append('<h1>File Loaded</h1>');\n\t\t$('#dialogAlert').dialog(\"open\");\n\n\t\tvar filecontent=reader.result;\n\t\t\n\t\tvar info=parseInformation(filecontent);\n\t\tvar data=parseDataFile(filecontent);\n\t\tvar laps=parseLap(data);\n\t\t\n\t\tpresentInformation(info);\n        $('#lapselector').show();\n\t\tpresentLaps(laps);\n        \n\t\t//speedGraph(data,laps);\n        var speedgraph=analysisGraph('speedgraph','Speed',data,laps,20);\n        var accelgraph=analysisGraph('accelgraph','LonAcc',data,laps,1);\n        var steergraph=analysisGraph('steergraph','Steer',data,laps,20);           \n        var throttlegraph=analysisGraph('throttlegraph','Throttle',data,laps,20);\n        var breakgraph=analysisGraph('brakegraph','Brake',data,laps,20);\n\t\t\n\t\tvar mapgraph=map('map',data,laps);\n        \n        Graphs=[speedgraph, accelgraph, steergraph, throttlegraph, breakgraph, mapgraph];\n        \n        // on event triggered change graphs\n        \n       //     manipulateID(graphs,\"highlight\",id);\n        \n\t};\n\n\t// Read in the image file as a binary string.\n\treader.readAsText(evt.target.files[0]);\n}\n\n// Data\n\nfunction parseInformation(content) {\n\tvar rows=content.replace(/[\\\"\\r]/g,\"\").split(\"\\n\");\n\n\tvar tmpinfo=new information();\n\t\n\ttmpinfo.format=rows[0].split(\",\")[1];\n\ttmpinfo.venue=rows[1].split(\",\")[1];\n\ttmpinfo.vehicle=rows[2].split(\",\")[1];\n\ttmpinfo.user=rows[3].split(\",\")[1];\n\ttmpinfo.datasource=rows[4].split(\",\")[1];\n\ttmpinfo.comment=rows[5].split(\",\")[1];\n\ttmpinfo.date=rows[6].split(\",\")[1];\n\ttmpinfo.time=rows[7].split(\",\")[1];\n\ttmpinfo.samplerate=rows[8].split(\",\")[1];\n\ttmpinfo.duration=rows[9].split(\",\")[1];\n\ttmpinfo.segment=rows[10].split(\",\")[1];\n\ttmpinfo.beaconmarkers=rows[11].split(\",\")[1];\n\n\t\n\treturn tmpinfo;\n}\n\nfunction parseUnits(content){\n\t\n\tvar rows=content.replace(/[\\\"\\r]/g,\"\").split(\"\\n\");\n\tvar tmpunits=rows[14].split(\",\");\t\n\t\n\tvar units = new Array();\n\t\n\tfor (var count=0;count < tmpunits.length; count++) {\n\t\tunits.push(tmpunits[count]);\n\t};\n\t\n\treturn units;\n\t\n}\n\nfunction parseLap(datastring) {\n\n\tvar dataobj=JSON.parse(datastring);\n\tdataobj.sort(function (a,b) {return a.Time*1000 - b.Time*1000;});\n\tvar lapcount=0;\n\tvar laps=new Array();\n\tvar start=1;\n\t\n\tfor(var count=1;count<dataobj.length; count++) {\n\t\tif (parseFloat(dataobj[count].Distance)+1<parseFloat(dataobj[count-1].Distance)) {\n\t\t\tvar lapdata=new Object;\n\t\t\tlapdata.start=start;\n\t\t\tlapdata.stop=count;\n\t\t\tlapdata.lap=lapcount;\n\t\t\tlapdata.laptime=parseFloat(dataobj[count].Time)-parseFloat(dataobj[start].Time);\n\t\t\tlaps[lapcount]=lapdata;\n\t\t\tstart=count+1;\n\t\t\tlapcount++;\n\t\t}\n\t}\n\t\n    if (dataobj.length > start) {\n        var lapdata=new Object;\n        lapdata.start=start;\n\t    lapdata.stop=dataobj.length;\n\t    lapdata.lap=lapcount;\n\t    lapdata.laptime=parseFloat(dataobj[dataobj.length-1].Time)-parseFloat(dataobj[start].Time);\n\t    laps[lapcount]=lapdata;\n    }\n            \n\treturn laps;\n\t\n}\n\nfunction parseDataFile(content) {\n\t\n\tvar data = new Array;\n\t    \n\tvar rows=content.replace(/[\\\"\\r]/g,\"\").split(\"\\n\");\t\n        \n\tvar headings1=rows[13].split(\",\");\n\n\tvar headings = new Array();\n\t\t\n\tfor (var count=0;count < headings1.length; count++) {\n\t\theadings.push(headings1[count]);\n\t};\n\t\n\n    for (var count=16;count < rows.length; count++) {\n\t\tvar dataobj= new Object;\n\t\tdatarow=rows[count].split(\",\");\n\t\tfor (var count2=0; count2<headings.length; count2++) {\n\t\t\tdataobj[headings[count2]]=datarow[count2];\n\t\t}\n\t\tdata.push(dataobj);\n\t}\n\t\n\tvar datastring=JSON.stringify(data);\n\t\n\treturn datastring;\n}"]],"start1":0,"start2":0,"length1":0,"length2":15101}]],"length":15101,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351107000209,"patch":[[{"diffs":[[0,"rcle'\n\t\t\t\t\t}"],[-1,","],[0,"\n\t\t\t\t}\n\t\t\t},"]],"start1":5899,"start2":5899,"length1":25,"length2":24},{"diffs":[[0,".Gear)=="],[1,"="],[0,"0) {\n"],[-1,"\t\t\t\t"],[1,"                "],[0,"    var "]],"start1":6349,"start2":6349,"length1":25,"length2":38},{"diffs":[[0,"t);\n\t\t\t} else {\n"],[-1,"\t\t\t\t"],[1,"                    "],[0,"var point={\n    "]],"start1":6730,"start2":6730,"length1":36,"length2":52},{"diffs":[[0,"           }"],[-1,","],[0,"\n\t\t\t},\n\t\t\tyA"]],"start1":8103,"start2":8103,"length1":25,"length2":24}]],"length":15128,"saved":false}
{"ts":1351107042035,"patch":[[{"diffs":[[0,"0'];\n\t\n\t"],[1,"var "],[0,"teldata="]],"start1":9076,"start2":9076,"length1":16,"length2":20},{"diffs":[[0,"nt,\n    "],[-1,"\t\t\t\t\t"],[1,"                    "],[0,"name: te"]],"start1":9465,"start2":9465,"length1":21,"length2":36},{"diffs":[[0,"d: false"],[-1,", "],[0,"\n\t\t\t\t\t\t}"]],"start1":9550,"start2":9550,"length1":18,"length2":16}]],"length":15145,"saved":false}
{"ts":1351107175834,"patch":[[{"diffs":[[0,"units = "],[-1,"new Array()"],[1,"[]"],[0,";\n\t\n\tfor"]],"start1":13507,"start2":13507,"length1":27,"length2":18},{"diffs":[[0,"nt]);\n\t}"],[-1,";"],[0,"\n\t\n\tretu"]],"start1":13600,"start2":13600,"length1":17,"length2":16},{"diffs":[[0,"ar laps="],[-1,"new Array()"],[1,"[]"],[0,";\n\tvar s"]],"start1":13787,"start2":13787,"length1":27,"length2":18},{"diffs":[[0,"lapdata="],[-1,"new Object"],[1,"{}"],[0,";\n\t\t\tlap"]],"start1":13957,"start2":13957,"length1":26,"length2":18},{"diffs":[[0,"lapdata="],[-1,"new Object"],[1,"{}"],[0,";\n      "]],"start1":14240,"start2":14240,"length1":26,"length2":18}]],"length":15110,"saved":false}
{"ts":1351107289342,"patch":[[{"diffs":[[0,"=start;\n"],[-1,"\t"],[1,"    "],[0,"    lapd"]],"start1":14273,"start2":14273,"length1":17,"length2":20},{"diffs":[[0,"length;\n"],[-1,"\t"],[1,"    "],[0,"    lapd"]],"start1":14310,"start2":14310,"length1":17,"length2":20},{"diffs":[[0,"pcount;\n"],[-1,"\t"],[1,"    "],[0,"    lapd"]],"start1":14340,"start2":14340,"length1":17,"length2":20},{"diffs":[[0,".Time);\n"],[-1,"\t"],[1,"    "],[0,"    laps"]],"start1":14440,"start2":14440,"length1":17,"length2":20},{"diffs":[[0,"a = "],[-1,"new Array;\n\t    "],[1,"[];\n"],[0,"\n\tva"]],"start1":14562,"start2":14562,"length1":24,"length2":12},{"diffs":[[0,"gs ="],[-1," new Array()"],[1,"[]"],[0,";\n\t\t"]],"start1":14682,"start2":14682,"length1":20,"length2":10},{"diffs":[[0,"nt]);\n\t}"],[-1,";"],[0,"\n\t\n\n    "]],"start1":14777,"start2":14777,"length1":17,"length2":16},{"diffs":[[0,"obj="],[-1," new Object;\n\t\t"],[1,"{};\n\t\tvar "],[0,"data"]],"start1":14853,"start2":14853,"length1":23,"length2":18}]],"length":15094,"saved":false}
